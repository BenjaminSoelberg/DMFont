/*
* Font data and code extracted from the firmware of the Swissmicro DM16L retro HP calculator.
* The code has been extracted using Ida Pro with minor code and type modifications.
*/

#include "stdafx.h"
#include "string.h"

struct font_struct
{
	unsigned __int8 char_width;
	unsigned __int8 __char_height;
	unsigned char min_char;
	unsigned char max_char;
	unsigned __int8 *font_data;
};

unsigned __int8 normal_font_data[] =
{
	0x00, 0x04, 0x04, 0x02, 0x00, 0x00, 0x7F, 0x01, 0x09, 0x05,
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0B,
	0x06, 0x44, 0x00, 0xFF, 0x01, 0x44, 0x00, 0x44, 0x00, 0xFF,
	0x01, 0x44, 0x0B, 0x06, 0x00, 0x00, 0x8C, 0x00, 0x12, 0x01,
	0xFF, 0x03, 0x22, 0x01, 0xC4, 0x0D, 0x07, 0x82, 0x00, 0x45,
	0x00, 0x25, 0x00, 0x92, 0x00, 0x48, 0x01, 0x44, 0x01, 0x82,
	0x0C, 0x06, 0x00, 0x00, 0xE6, 0x00, 0x19, 0x01, 0x26, 0x01,
	0xC0, 0x00, 0x20, 0x01, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x02, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0xFE,
	0x01, 0x01, 0x02, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x02, 0xFE, 0x01, 0x0B, 0x06, 0x00, 0x00, 0x88, 0x00, 0x50,
	0x00, 0x20, 0x00, 0x50, 0x00, 0x88, 0x0B, 0x06, 0x00, 0x00,
	0x20, 0x00, 0x20, 0x00, 0xF8, 0x00, 0x20, 0x00, 0x20, 0x06,
	0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x0B, 0x06, 0x00,
	0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
	0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x09, 0x05,
	0x00, 0x00, 0x80, 0x01, 0x60, 0x00, 0x18, 0x00, 0x06, 0x0B,
	0x06, 0x00, 0x00, 0xFE, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0xFE, 0x08, 0x04, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00,
	0xFF, 0x01, 0x0C, 0x06, 0x00, 0x00, 0x82, 0x01, 0x41, 0x01,
	0x21, 0x01, 0x11, 0x01, 0x0E, 0x01, 0x0B, 0x06, 0x00, 0x00,
	0x82, 0x00, 0x01, 0x01, 0x11, 0x01, 0x11, 0x01, 0xEE, 0x0B,
	0x06, 0x00, 0x00, 0x60, 0x00, 0x58, 0x00, 0x46, 0x00, 0xFF,
	0x01, 0x40, 0x0B, 0x06, 0x00, 0x00, 0x9F, 0x00, 0x09, 0x01,
	0x09, 0x01, 0x09, 0x01, 0xF1, 0x0B, 0x06, 0x00, 0x00, 0xFE,
	0x00, 0x11, 0x01, 0x11, 0x01, 0x11, 0x01, 0xE2, 0x0B, 0x06,
	0x00, 0x00, 0x01, 0x00, 0xC1, 0x01, 0x31, 0x00, 0x0D, 0x00,
	0x03, 0x0B, 0x06, 0x00, 0x00, 0xEE, 0x00, 0x11, 0x01, 0x11,
	0x01, 0x11, 0x01, 0xEE, 0x0B, 0x06, 0x00, 0x00, 0x8E, 0x00,
	0x11, 0x01, 0x11, 0x01, 0x11, 0x01, 0xFE, 0x08, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x8C, 0x01, 0x8C, 0x01, 0x08, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x01, 0x0A, 0x05, 0x00,
	0x00, 0x20, 0x00, 0x50, 0x00, 0x88, 0x00, 0x04, 0x01, 0x0B,
	0x06, 0x00, 0x00, 0x50, 0x00, 0x50, 0x00, 0x50, 0x00, 0x50,
	0x00, 0x50, 0x09, 0x05, 0x00, 0x00, 0x04, 0x01, 0x88, 0x00,
	0x50, 0x00, 0x20, 0x0B, 0x06, 0x00, 0x00, 0x02, 0x00, 0x01,
	0x00, 0x61, 0x01, 0x11, 0x00, 0x0E, 0x0D, 0x07, 0x78, 0x00,
	0x86, 0x01, 0x32, 0x01, 0x49, 0x02, 0x39, 0x02, 0x42, 0x02,
	0x7C, 0x0E, 0x07, 0x80, 0x01, 0x70, 0x00, 0x4C, 0x00, 0x43,
	0x00, 0x4C, 0x00, 0x70, 0x00, 0x80, 0x01, 0x0B, 0x06, 0x00,
	0x00, 0xFF, 0x01, 0x11, 0x01, 0x11, 0x01, 0x11, 0x01, 0xEE,
	0x0B, 0x06, 0xFE, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x82, 0x0B, 0x06, 0xFF, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x82, 0x00, 0x7C, 0x0C, 0x06, 0x00, 0x00,
	0xFF, 0x01, 0x11, 0x01, 0x11, 0x01, 0x11, 0x01, 0x01, 0x01,
	0x0B, 0x06, 0x00, 0x00, 0xFF, 0x01, 0x11, 0x00, 0x11, 0x00,
	0x11, 0x00, 0x01, 0x0C, 0x06, 0xFE, 0x00, 0x01, 0x01, 0x01,
	0x01, 0x11, 0x01, 0x91, 0x00, 0xF2, 0x01, 0x0C, 0x06, 0xFF,
	0x01, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xFF,
	0x01, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
	0x01, 0x07, 0x04, 0xC0, 0x00, 0x00, 0x01, 0x00, 0x01, 0xFF,
	0x0E, 0x07, 0x00, 0x00, 0xFF, 0x01, 0x18, 0x00, 0x24, 0x00,
	0x42, 0x00, 0x81, 0x00, 0x00, 0x01, 0x0C, 0x06, 0x00, 0x00,
	0xFF, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
	0x0E, 0x07, 0xFF, 0x01, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x00,
	0x30, 0x00, 0x0C, 0x00, 0xFF, 0x01, 0x0C, 0x06, 0xFF, 0x01,
	0x06, 0x00, 0x18, 0x00, 0x20, 0x00, 0xC0, 0x00, 0xFF, 0x01,
	0x0B, 0x06, 0xFE, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0xFE, 0x0B, 0x06, 0xFF, 0x01, 0x11, 0x00, 0x11,
	0x00, 0x11, 0x00, 0x11, 0x00, 0x0E, 0x0C, 0x06, 0xFE, 0x00,
	0x01, 0x01, 0x01, 0x01, 0x41, 0x01, 0x81, 0x01, 0xFE, 0x02,
	0x0C, 0x06, 0xFF, 0x01, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00,
	0x29, 0x00, 0xC6, 0x01, 0x0B, 0x06, 0x00, 0x00, 0x8E, 0x00,
	0x11, 0x01, 0x11, 0x01, 0x11, 0x01, 0xE2, 0x0B, 0x06, 0x00,
	0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0x01, 0x01, 0x00, 0x01,
	0x0B, 0x06, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
	0x00, 0x01, 0xFF, 0x0D, 0x07, 0x03, 0x00, 0x1C, 0x00, 0x60,
	0x00, 0x80, 0x01, 0x60, 0x00, 0x1C, 0x00, 0x03, 0x0D, 0x07,
	0x1F, 0x00, 0x60, 0x00, 0x80, 0x01, 0x7C, 0x00, 0x80, 0x01,
	0x60, 0x00, 0x1F, 0x0E, 0x07, 0x83, 0x01, 0x44, 0x00, 0x28,
	0x00, 0x10, 0x00, 0x28, 0x00, 0x44, 0x00, 0x83, 0x01, 0x0D,
	0x07, 0x03, 0x00, 0x04, 0x00, 0x08, 0x00, 0xF0, 0x01, 0x08,
	0x00, 0x04, 0x00, 0x03, 0x0E, 0x07, 0x81, 0x01, 0x41, 0x01,
	0x21, 0x01, 0x11, 0x01, 0x09, 0x01, 0x05, 0x01
};

unsigned __int8 bold_font_data[] =
{
	0x00, 0x07, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x01,
	0xBF, 0x01, 0x09, 0x05, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00,
	0x07, 0x00, 0x07, 0x13, 0x0A, 0x00, 0x00, 0x20, 0x00, 0xE4,
	0x00, 0xFC, 0x00, 0x3F, 0x00, 0xE7, 0x00, 0xFC, 0x00, 0x3F,
	0x00, 0x27, 0x00, 0x04, 0x0F, 0x08, 0x00, 0x00, 0x0C, 0x01,
	0x1E, 0x01, 0xFF, 0x03, 0xFF, 0x03, 0x22, 0x01, 0xE2, 0x01,
	0xC2, 0x19, 0x0D, 0x00, 0x00, 0x0E, 0x00, 0x1F, 0x00, 0x11,
	0x01, 0x91, 0x01, 0xFF, 0x00, 0x7E, 0x00, 0xFC, 0x00, 0xFE,
	0x01, 0x13, 0x01, 0x11, 0x01, 0xF0, 0x01, 0xE0, 0x14, 0x0A,
	0x00, 0x00, 0xEE, 0x00, 0xFF, 0x01, 0x11, 0x01, 0x11, 0x01,
	0xBF, 0x01, 0xEE, 0x00, 0xE0, 0x01, 0x30, 0x01, 0x10, 0x01,
	0x05, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x0A, 0x05, 0x00,
	0x00, 0xF8, 0x00, 0xFE, 0x03, 0x07, 0x07, 0x01, 0x04, 0x0B,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x07, 0x07, 0xFE,
	0x03, 0xF8, 0x0F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,
	0x0E, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x0E, 0x00, 0x0A, 0x11,
	0x09, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xFE,
	0x00, 0xFE, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x08, 0x04,
	0x00, 0x00, 0x00, 0x04, 0x80, 0x07, 0x80, 0x03, 0x0D, 0x07,
	0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00,
	0x10, 0x00, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80,
	0x01, 0x80, 0x01, 0x0D, 0x07, 0x00, 0x0C, 0x00, 0x0F, 0xC0,
	0x03, 0xF0, 0x00, 0x3C, 0x00, 0x0F, 0x00, 0x03, 0x0F, 0x08,
	0x00, 0x00, 0xFE, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0xFF, 0x01, 0xFE, 0x10, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x01, 0x02, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0x00,
	0x01, 0x00, 0x01, 0x10, 0x08, 0x00, 0x00, 0x86, 0x01, 0xC7,
	0x01, 0x61, 0x01, 0x21, 0x01, 0x31, 0x01, 0x1F, 0x01, 0x0E,
	0x01, 0x0F, 0x08, 0x00, 0x00, 0x82, 0x00, 0x83, 0x01, 0x11,
	0x01, 0x11, 0x01, 0x11, 0x01, 0xFF, 0x01, 0xEE, 0x11, 0x09,
	0x00, 0x00, 0x30, 0x00, 0x38, 0x00, 0x2C, 0x00, 0x26, 0x00,
	0xFF, 0x01, 0xFF, 0x01, 0x20, 0x00, 0x20, 0x0F, 0x08, 0x00,
	0x00, 0x80, 0x00, 0x9F, 0x01, 0x1F, 0x01, 0x11, 0x01, 0x11,
	0x01, 0xF1, 0x01, 0xE1, 0x0F, 0x08, 0x00, 0x00, 0xFC, 0x00,
	0xFE, 0x01, 0x0B, 0x01, 0x09, 0x01, 0x09, 0x01, 0xF9, 0x01,
	0xF0, 0x0F, 0x08, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xC1,
	0x01, 0xF1, 0x01, 0x3D, 0x00, 0x0F, 0x00, 0x03, 0x0F, 0x08,
	0x00, 0x00, 0xEE, 0x00, 0xFF, 0x01, 0x11, 0x01, 0x11, 0x01,
	0x11, 0x01, 0xFF, 0x01, 0xEE, 0x0F, 0x08, 0x00, 0x00, 0x1E,
	0x00, 0x3F, 0x01, 0x21, 0x01, 0x21, 0x01, 0xA1, 0x01, 0xFF,
	0x00, 0x7E, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x01,
	0x8C, 0x01, 0x08, 0x04, 0x00, 0x00, 0x00, 0x04, 0x8C, 0x07,
	0x8C, 0x03, 0x12, 0x09, 0x00, 0x00, 0x20, 0x00, 0x70, 0x00,
	0x50, 0x00, 0xD8, 0x00, 0x88, 0x00, 0x8C, 0x01, 0x04, 0x01,
	0x04, 0x01, 0x11, 0x09, 0x00, 0x00, 0x48, 0x00, 0x48, 0x00,
	0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00,
	0x48, 0x11, 0x09, 0x00, 0x00, 0x04, 0x01, 0x04, 0x01, 0x8C,
	0x01, 0x88, 0x00, 0xD8, 0x00, 0x50, 0x00, 0x70, 0x00, 0x20,
	0x0D, 0x07, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0xB1, 0x01,
	0xB9, 0x01, 0x0F, 0x00, 0x06, 0x19, 0x0D, 0x00, 0x00, 0xF8,
	0x00, 0xFC, 0x01, 0x06, 0x03, 0xFB, 0x06, 0xFD, 0x05, 0x05,
	0x05, 0x05, 0x05, 0xFD, 0x05, 0xFF, 0x05, 0x06, 0x01, 0xFC,
	0x01, 0xF8, 0x12, 0x09, 0x00, 0x00, 0x80, 0x01, 0xF0, 0x01,
	0x7C, 0x00, 0x4F, 0x00, 0x4F, 0x00, 0x7C, 0x00, 0xF0, 0x01,
	0x80, 0x01, 0x0F, 0x08, 0x00, 0x00, 0xFF, 0x01, 0xFF, 0x01,
	0x11, 0x01, 0x11, 0x01, 0x1F, 0x01, 0xFE, 0x01, 0xE0, 0x11,
	0x09, 0x00, 0x00, 0x7C, 0x00, 0xFE, 0x00, 0x83, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x83, 0x01, 0x82, 0x11, 0x09,
	0x00, 0x00, 0xFF, 0x01, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x83, 0x01, 0xFE, 0x00, 0x7C, 0x10, 0x08, 0x00,
	0x00, 0xFF, 0x01, 0xFF, 0x01, 0x11, 0x01, 0x11, 0x01, 0x11,
	0x01, 0x11, 0x01, 0x11, 0x01, 0x0F, 0x08, 0x00, 0x00, 0xFF,
	0x01, 0xFF, 0x01, 0x11, 0x00, 0x11, 0x00, 0x11, 0x00, 0x11,
	0x00, 0x01, 0x12, 0x09, 0x00, 0x00, 0x7C, 0x00, 0xFE, 0x00,
	0x83, 0x01, 0x01, 0x01, 0x21, 0x01, 0x21, 0x01, 0xE3, 0x01,
	0xE2, 0x01, 0x12, 0x09, 0x00, 0x00, 0xFF, 0x01, 0xFF, 0x01,
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0xFF, 0x01,
	0xFF, 0x01, 0x0A, 0x05, 0x00, 0x00, 0x01, 0x01, 0xFF, 0x01,
	0xFF, 0x01, 0x01, 0x01, 0x0B, 0x06, 0x00, 0x01, 0x00, 0x01,
	0x01, 0x01, 0x01, 0x01, 0xFF, 0x01, 0xFF, 0x10, 0x08, 0x00,
	0x00, 0xFF, 0x01, 0xFF, 0x01, 0x38, 0x00, 0x6C, 0x00, 0xC6,
	0x00, 0x83, 0x01, 0x01, 0x01, 0x10, 0x08, 0x00, 0x00, 0xFF,
	0x01, 0xFF, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
	0x01, 0x00, 0x01, 0x16, 0x0B, 0x00, 0x00, 0xFF, 0x01, 0xFF,
	0x01, 0x0F, 0x00, 0x3C, 0x00, 0xF0, 0x00, 0xF0, 0x00, 0x3C,
	0x00, 0x0F, 0x00, 0xFF, 0x01, 0xFF, 0x01, 0x12, 0x09, 0x00,
	0x00, 0xFF, 0x01, 0xFF, 0x01, 0x0F, 0x00, 0x1C, 0x00, 0x70,
	0x00, 0xE0, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0x13, 0x0A, 0x00,
	0x00, 0x7C, 0x00, 0xFE, 0x00, 0x83, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x83, 0x01, 0xFE, 0x00, 0x7C, 0x0F, 0x08,
	0x00, 0x00, 0xFF, 0x01, 0xFF, 0x01, 0x21, 0x00, 0x21, 0x00,
	0x21, 0x00, 0x3F, 0x00, 0x1E, 0x14, 0x0A, 0x00, 0x00, 0x7C,
	0x00, 0xFE, 0x00, 0x83, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x03, 0x83, 0x07, 0xFE, 0x04, 0x7C, 0x04, 0x12, 0x09, 0x00,
	0x00, 0xFF, 0x01, 0xFF, 0x01, 0x21, 0x00, 0x21, 0x00, 0x71,
	0x00, 0xDF, 0x00, 0x8E, 0x01, 0x00, 0x01, 0x11, 0x09, 0x00,
	0x00, 0x8E, 0x00, 0x9F, 0x01, 0x11, 0x01, 0x11, 0x01, 0x11,
	0x01, 0x11, 0x01, 0xF3, 0x01, 0xE2, 0x11, 0x09, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFF, 0x01, 0xFF, 0x01,
	0x01, 0x00, 0x01, 0x00, 0x01, 0x11, 0x09, 0x00, 0x00, 0x7F,
	0x00, 0xFF, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0x01, 0x80,
	0x01, 0xFF, 0x00, 0x7F, 0x11, 0x09, 0x00, 0x00, 0x07, 0x00,
	0x1F, 0x00, 0x78, 0x00, 0xE0, 0x01, 0xE0, 0x01, 0x78, 0x00,
	0x1F, 0x00, 0x07, 0x19, 0x0D, 0x00, 0x00, 0x0F, 0x00, 0x7F,
	0x00, 0xF0, 0x01, 0xE0, 0x01, 0x7C, 0x00, 0x1F, 0x00, 0x1F,
	0x00, 0x7C, 0x00, 0xE0, 0x01, 0xF0, 0x01, 0x7F, 0x00, 0x0F,
	0x12, 0x09, 0x00, 0x00, 0x83, 0x01, 0xC7, 0x01, 0x6C, 0x00,
	0x38, 0x00, 0x38, 0x00, 0x6C, 0x00, 0xC7, 0x01, 0x83, 0x01,
	0x11, 0x09, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x1E, 0x00,
	0xF8, 0x01, 0xF8, 0x01, 0x1E, 0x00, 0x07, 0x00, 0x01, 0x12,
	0x09, 0x00, 0x00, 0x81, 0x01, 0xC1, 0x01, 0x61, 0x01, 0x31,
	0x01, 0x19, 0x01, 0x0D, 0x01, 0x07, 0x01, 0x03, 0x01
};

unsigned __int8 small_font_data[] =
{
	0x00, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x0C, 0x00, 0x0C, 0x7C,
	0x28, 0x7C, 0x7C, 0x44, 0x7C, 0x24, 0x10, 0x48, 0x28, 0x54,
	0x08, 0x00, 0x0C, 0x00, 0x38, 0x44, 0x00, 0x44, 0x38, 0x00,
	0x20, 0x10, 0x08, 0x10, 0x38, 0x10, 0x80, 0x40, 0x00, 0x10,
	0x10, 0x10, 0x00, 0x40, 0x00, 0x20, 0x10, 0x08, 0x38, 0x44,
	0x38, 0x00, 0x7C, 0x00, 0x64, 0x54, 0x48, 0x44, 0x54, 0x28,
	0x1C, 0x10, 0x7C, 0x4C, 0x54, 0x24, 0x38, 0x54, 0x20, 0x04,
	0x74, 0x0C, 0x28, 0x54, 0x28, 0x08, 0x54, 0x38, 0x00, 0x50,
	0x00, 0x80, 0x50, 0x00, 0x10, 0x28, 0x44, 0x28, 0x28, 0x28,
	0x44, 0x28, 0x10, 0x04, 0x54, 0x08, 0x38, 0x4C, 0x5C, 0x78,
	0x14, 0x78, 0x7C, 0x54, 0x28, 0x38, 0x44, 0x44, 0x7C, 0x44,
	0x38, 0x7C, 0x54, 0x44, 0x7C, 0x14, 0x04, 0x38, 0x44, 0x34,
	0x7C, 0x10, 0x7C, 0x00, 0x7C, 0x00, 0x20, 0x40, 0x3C, 0x7C,
	0x10, 0x6C, 0x7C, 0x40, 0x40, 0x7C, 0x08, 0x7C, 0x7C, 0x04,
	0x7C, 0x7C, 0x44, 0x7C, 0x7C, 0x14, 0x08, 0x38, 0x44, 0x78,
	0x7C, 0x14, 0x68, 0x48, 0x54, 0x24, 0x04, 0x7C, 0x04, 0x7C,
	0x40, 0x7C, 0x3C, 0x40, 0x3C, 0x7C, 0x20, 0x7C, 0x6C, 0x10,
	0x6C, 0x1C, 0x60, 0x1C, 0x64, 0x54, 0x4C, 0x7C, 0x44, 0x00,
	0x08, 0x10, 0x20, 0x44, 0x7C, 0x00, 0x08, 0x04, 0x08, 0x80,
	0x80, 0x80, 0x04, 0x08, 0x00, 0x78, 0x44, 0x78
};

font_struct normal_font = { 0x0D, 0x0C, 0x20, 0x5A, normal_font_data };
font_struct bold_font = { 0x0D, 0x0C, 0x20, 0x5A, bold_font_data };
font_struct small_font = { 0x03, 0x07, 0x20, 0x61, small_font_data };

char screen[16][0x84];

void screen_set_pixel(unsigned __int8 x, unsigned __int8 y)
{
	screen[y][x] = '#';
}

unsigned __int8 print_char_with_font(char ch, unsigned __int8 screen_x, unsigned __int8 screen_y, font_struct *font)
{
	unsigned __int8 *font_data; // r3@1
	unsigned __int8 char_width; // [sp+4h] [bp-2Ch]@4
	unsigned __int8 delta_x; // r7@9
	unsigned __int8 delta_y; // [sp+0h] [bp-30h]@11
	unsigned __int8 result; // r0@2
	unsigned __int8 pixel_data_size; // r2@4
	unsigned __int8 *pixel_data; // r4@4
	unsigned __int8 ch_delta; // r0@5
	unsigned __int8 ch_delta_index; // r2@5
	unsigned __int8 pixel_data_byte; // r5@9
	unsigned __int8 pixel_data_bit_pos; // [sp+8h] [bp-28h]@11
	unsigned __int8 *pixel_data_end; // [sp+Ch] [bp-24h]@9

	font_data = font->font_data;
	if (font->max_char >= ch)
	{
		if (font_data == small_font_data)                   // Small font
		{
			pixel_data_size = 3;
			char_width = 3;
			pixel_data = &font_data[3 * (ch - font->min_char)];
		}
		else
		{
			ch_delta = ch - font->min_char;                 // Normal and bold font
			ch_delta_index = 0;
			// Thunk layout: thunk size in bytes, char width?, pixel data
			while (ch_delta_index < ch_delta)               // Loop through font thunks
			{
				++ch_delta_index;
				font_data += *font_data + 2;
			}
			pixel_data_size = *font_data;
			pixel_data = font_data + 2;
			char_width = font_data[1];
		}
		pixel_data_byte = 0;
		pixel_data_end = &pixel_data[pixel_data_size];
		for (delta_x = 0; delta_x < char_width; ++delta_x)
		{
			pixel_data_bit_pos = 8;
			delta_y = 0;
			while (delta_y < font->__char_height)
			{
				if (pixel_data_bit_pos == 8)
				{
					if (pixel_data == pixel_data_end) { // bad font data guard ?
						return char_width;
					}
					pixel_data_byte = *pixel_data;
					pixel_data_bit_pos = 0;
					++pixel_data;
				}
				if (pixel_data_byte & 1) {              // Is pixel set ?
					screen_set_pixel(delta_x + screen_x, delta_y + screen_y);
				}
				pixel_data_byte >>= 1;
				++delta_y;
				++pixel_data_bit_pos;
			}
		}
		result = char_width;
	}
	else
	{
		result = font->char_width;
	}
	return result;
}

unsigned int print_with_font(char *string, unsigned __int8 x, unsigned __int8 y, font_struct *font)
{
	int len = strlen(string);
	for (int i = 0; i < len; i++) {
		x += print_char_with_font(*string++, x, y, font) + 1;
	}
	return x;
}

int main()
{
	memset(screen, ' ', 0x84 * 32);
	//	print_with_font("2017-08-23 22:02:56", 1, 0, &normal_font);
	//	print_with_font("USER F G BEGIN GRAD D.MY C PRGM", 7, 9, &small_font);
	print_with_font("- 8,8,8,8,8,8,8,8,8,8,", 1, 0, &normal_font);
	print_with_font("USER F G BEGIN GRAD D.MY C PRGM", 7, 9, &small_font);
	//	print_with_font("HELLO WORLD", 0, 20, &font_3_struct);
	//	print_with_font("HELLO WORLD", 0, 9, &font_3_struct);

	for (int y = 0; y < 16; y++) {
		for (int x = 0; x < 0x84; x++) {
			printf("%c", screen[y][x]);
		}
		printf("\n");
	}
	return getchar();
}
